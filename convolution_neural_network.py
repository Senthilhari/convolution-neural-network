# -*- coding: utf-8 -*-
"""convolution neural network.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-I0vwPhz3y4ZVuNGqrOxKvQYsswXnQ_P
"""

import tensorflow as tf

from tensorflow import keras

import numpy as np

import pandas as pd

import matplotlib.pyplot as plt

Fashion_data=keras.datasets.fashion_mnist.load_data()

Fashion_data

from sklearn.metrics import confusion_matrix, accuracy_score,classification_report

(x_train_sp,y_train_sp),(x_test_sp,y_test_sp)=Fashion_data
x_train_sp.shape

iteams_names =["T-shiet/top","trouser","pullover","dress","coat","sandal","shirt","sneakers","bag","ankle boot"]

x_train_sp=x_train_sp.reshape((60000,28,28,1))
x_test_sp=x_test_sp.reshape((10000,28,28,1))
x_train_sp.shape

x_train_norm=x_train_sp/255
x_test_norm=x_test_sp/255

x_validate,x_train=x_train_norm[:5000],x_train_norm[5000:]
y_validate,y_train=y_train_sp[:5000],y_train_sp[5000:]
x_test=x_test_norm
y_validate

#random seed
tf.random.set_seed(42)
#model architecture
model=keras.models.Sequential()
#bulding model
model.add (keras.layers.Conv2D(filters=32,kernel_size=(3,3),strides=1,padding='valid',activation='relu',input_shape=(28,28,1)))
model.add (keras.layers.MaxPooling2D((2,2)))
model.add (keras.layers.Flatten())
model.add (keras.layers.Dense(300,activation='relu'))
model.add (keras.layers.Dense(100,activation='relu'))
model.add (keras.layers.Dense(10,activation='softmax'))
#model summary
model.summary()

#compile the model
model.compile(loss="sparse_categorical_crossentropy",optimizer="sgd",metrics=["accuracy"])
#fitting values to model
model_fit=model.fit(x_train,y_train,epochs=5,batch_size=64,validation_data=(x_validate,y_validate))
#model performance visualziation
pd.DataFrame(model_fit.history).plot(figsize=(8,5))
plt.title('model performance')
plt.xlabel('epochs')
plt.ylabel('performane')
plt.grid(True)
plt.show()

#model evaluation
score=model.evaluate(x_test,y_test_sp)
print("model evaluation score:",score)

#prediction & class output
y_pred=np.argmax(model.predict(x_test),axis=-1)
print("y_pred output:",y_pred)

#class & labels of initial 3 data
print("predicated class:",y_pred[:3])
print("predicted class in labels:",np.array(iteams_names)[y_pred[:3]])

#predicted output visualization
plt.figure(figsize=(6,4))
plt.imshow(x_test[6].reshape((28,28)))
plt.show()

#performance metrics
#confusion matrix
print("confusion matrix:\n",confusion_matrix(y_test_sp,y_pred))

#accuracy score
print("accuracy score",accuracy_score(y_test_sp,y_pred))

#classfication report
print("classfication report :\n",classification_report(y_test_sp,y_pred))

